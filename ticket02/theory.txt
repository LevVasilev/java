Билет №2
-----ЗАДАНИЕ 1------
Получение информации о типе.
Создание экземпляров классов.
Вызов методов класса.
--------------------

public class Main {
   public static void main(String[] args) {
       MyClass myClass = new MyClass();
       System.out.println(myClass.getClass().getName());
       myClass.print();
   }
}

public class MyClass {
   int a = 8;
   public void print() {
       System.out.println(a);
   }
}
 А если тебе нужно в условии проверить допустим является ли переменная строкой то пригодится следующее:
    if(s instanceof String)
вместо String, можешь поставить любой класс, который тебе нужен.

-----ЗАДАНИЕ 2------
Оранизация программы на Java.
Основные структурыне единицы.
Процесс интерпретации и компиляции.
Роль JVM.
--------------------
Java — мультиплатформенный язык программирования. Это значит, что программы, написанные на языке Java, можно выполнять на любой платформе, где установлена специальная исполняющая система Java. Такая система называется Java Virtual Machine (JVM). Для того, чтобы перевести программу из исходного кода в код, понятный JVM, нужно её скомпилировать. Код, понятный JVM называется байт-кодом и содержит набор инструкций, которые в дальнейшем будет исполнять виртуальная машина.
Для компиляции исходного кода в байт-код существует компилятор javac, входящий в поставку JDK (Java Development Kit). На вход компилятор принимает файл с расширением .java, содержащий исходный код программы, а на выходе выдает файл с расширением .class, содержащий байт-код, необходимый для исполнения программы виртуальной машиной.
После того, как программа была скомпилирована в байт-код, она может быть выполнена с помощью виртуальной машины.

Компиляция — трансляция программы, составленной на исходном языке высокого уровня, в эквивалентную программу на низкоуровневом языке, близком машинному коду.
Интерпретация — пооператорный (покомандный, построчный) анализ, обработка и тут же выполнение исходной программы или запроса (в отличие от компиляции, при которой программа транслируется без её выполнения).
Язык Java обладает как компилятором (javac), так и интерпретатором, в роли которого выступает виртуальная машина, которая построчно преобразует байт-код в машинный код и тут же его исполняет. Таким образом, когда мы запускаем скомпилированную программу, виртуальная машина начинает её интерпретацию, то есть построчное преобразование байт-кода в машинный код, а так же его исполнение.
К сожалению, чистая интерпретация байт-кода является довольно долгим процессом и делает язык java медленным в сравнении с его конкурентами. Дабы избежать этого, был введен механизм, позволяющий ускорить интерпретацию байт-кода виртуальной машиной. Этот механизм называется Just-in-time компиляцией (JITC).

1) Компилятор javac преобразует исходный код программы в байт-код, который может быть выполнен на любой платформе, на которой установлена виртуальная машина Java;
2) После компиляции JVM интерпретирует получившийся байт-код;
3) Для ускорения работы Java-приложений, JVM использует механизм Just-In-Time компиляции, который преобразует наиболее часто выполняемые участки программы в машинный код и хранит их в памяти.
