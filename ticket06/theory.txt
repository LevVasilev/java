Билет №6
-----ЗАДАНИЕ 1------
Оператор new.
Понятие ссылки и указателя на объект.
Реализация в C++ и Java.
Время жизни объекта.
--------------------

Ключевое слово new отвечает за выделение памяти. Используется для создания объектов класса, а также массивов. 

Указателей в Java нет!
Нельзя же вложить объект в переменную. На этом моменте в нашей истории появляются ссылочные переменные.
Ссылочные переменные хранят адрес ячейки памяти, в которой расположен определенный объект.
То есть это “визитка” с адресом, имея которую мы можем найти наш объект в общей памяти и выполнять с ним некоторые манипуляции.
Реализация ссылки на объект в Java выглядит следующим образом:
Класс Car {
    String color;
    String model;
    int maxSpeed;
}
Car car = new Car();
В данном примере мы создали объект класса Car и присвоили ссылку на него переменной car.
Теперь мы можем обращаться к полям объекта, используя переменную car.
car.color = "red";
car.model = "BMW";
car.maxSpeed = 250;


Реализация ссылки на объект C++:
int *p = new int; // выделение памяти под один int
*p = 5;
Реализация указатель на объект C++:
int &r = *p;
r = 10;

Жизнь объекта в Java начинается с вызова конструктора.
Жизнь объекта заканчивается с вызова метода finalize() или сборщиком мусора.
finalize() это метод, который вызывается перед тем, как объект будет удален из памяти.

Жизнь объекта начинается с его создания. Срок жизни у объектов разный, точных цифр здесь не существует.
В любом случае, в течение какого-то времени он живет внутри программы и выполняет свои функции.
Если говорить точно, объект является “живым” пока на него есть ссылки. Как только ссылок не остается — объект “умирает”.

-----ЗАДАНИЕ 2------
Оранизация работы с файлами в Java.
--------------------

Класс File, определенный в пакете java.io, не работает напрямую с потоками. Его задачей является управление информацией о файлах и каталогах.
Хотя на уровне операционной системы файлы и каталоги отличаются, но в Java они описываются одним классом File.

В зависимости от того, что должен представлять объект File - файл или каталог, мы можем использовать один из конструкторов для создания объекта:
Например:
// создаем объект File для каталога
File dir1 = new File("C://SomeDir");
// создаем объекты для файлов, которые находятся в каталоге
File file1 = new File("C://SomeDir", "Hello.txt");
File file2 = new File(dir1, "Hello2.txt");

Класс File имеет ряд методов, которые позволяют управлять файлами и каталогами. Рассмотрим некоторые из них:
boolean createNewFile(): создает новый файл по пути, который передан в конструктор. В случае удачного создания возвращает true, иначе false
boolean delete(): удаляет каталог или файл по пути, который передан в конструктор. При удачном удалении возвращает true.
boolean exists(): проверяет, существует ли по указанному в конструкторе пути файл или каталог. И если файл или каталог существует, то возвращает true, иначе возвращает false
String getAbsolutePath(): возвращает абсолютный путь для пути, переданного в конструктор объекта
String getName(): возвращает краткое имя файла или каталога
String getParent(): возвращает имя родительского каталога
boolean isDirectory(): возвращает значение true, если по указанному пути располагается каталог
boolean isFile(): возвращает значение true, если по указанному пути находится файл
boolean isHidden(): возвращает значение true, если каталог или файл являются скрытыми
long length(): возвращает размер файла в байтах
long lastModified(): возвращает время последнего изменения файла или каталога. Значение представляет количество миллисекунд, прошедших с начала эпохи Unix
String[] list(): возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге
File[] listFiles(): возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге
boolean mkdir(): создает новый каталог и при удачном создании возвращает значение true
boolean renameTo(File dest): переименовывает файл или каталог