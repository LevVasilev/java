1.
Cat cat = new Cat();
а)
Сначала для хранения объекта выделяется память.
Далее Java-машина создает ссылку на этот объект (в нашем случае ссылка — это Cat cat).
В завершение происходит инициализация переменных и вызов конструктора (этот процесс мы рассмотрим подробнее).
3 пункт подробнее:
Первое что произойдет — проинициализируются статические переменные класса-родителя
После инициализации статических переменных класса-предка инициализируются статические переменные класса-потомка. 
Третьими по счету будут инициализированы нестатические переменные класса-предк а. 
Наконец, дело дошло до конструкторов! Точнее, до конструктора базового класса. Начало его работы — четвертый пункт в процессе создания объекта.
Теперь пришла очередь инициализации нестатических полей класса-потомка
И только сейчас, в последнюю очередь, будет вызван конструктор того класса, объект которого мы создаем!
б)
Когда в дочернем классе явно вызывается конструктор родительского класса с помощью ключевого слова super. Причем вызывать всегда надо первой строчкой тела конструктора.
в)
Java обеспечивает порядок, согласно которому каждый конструктор будет вызывать родительский конструктор. Поэтому, если первый оператор в конструкторе не вызывает другой конструктор с помощью this() или super(), то Java неявно вставляет вызов super(), то есть вызывает родительский конструктор без аргументов. Если у родительского класса нет конструктора без аргументов, но определены другие конструкторы, то подобный неявный вызов приводит к ошибке компиляции.

2. Диаграмма классов (от англ. "class diagram") предназначена для представления внутренней структуры программы в виде классов и связей между ними. 
Все сущности реального мира, с которыми собирается работать программист, должны быть представлены объектами классов в программе. При этом у каждого класса должно быть только одно назначение и уникально осмысленное имя, которое будет связано с этой целью.
Существует два основных типа диаграмм UML: структурные диаграммы и поведенческие диаграммы (а внутри этих категорий имеется много других). Эти варианты существуют для представления многочисленных типов сценариев и диаграмм, которые используют разные типы людей. 
Структурные диаграммы  представляют статическую структуру программного обеспечения или системы, они также показывают различные уровни абстракции и реализации. Они используются, чтобы помочь визуализировать различные структуры, составляющие систему, например, базу данных или приложение. Они показывают иерархию компонентов или модулей и то, как они связаны и взаимодействуют между собой. Эти инструменты обеспечивают руководство работы и гарантируют, что все части системы функционируют так, как задумано по отношению ко всем остальным частям. 
Поведенческие программы. Основное внимание здесь уделяется динамическим аспектам системы программного обеспечения или процесса. Эти диаграммы показывают функциональные возможности системы и демонстрируют, что должно происходить в моделируемой системе.  
Диаграммы классов оперируют тремя видами сущностей UML:
Структурные.
Поведенческие.
Аннотирующие.
Структурные сущности – это «имена существительные» в модели UML. В основном, статические части модели, представляющие либо концептуальные, либо физические элементы. Основным видом структурной сущности в диаграммах классов является класс.
 
Поведенческие сущности – динамические части моделей UML. Это «глаголы» моделей, представляющие поведение модели во времени и пространстве. Основной из них является взаимодействие – поведение, которое заключается в обмене сообщениями между наборами объектов или ролей в определенном контексте для достижения некоторой цели. Сообщение изображается в виде линии со стрелкой, почти всегда сопровождаемой именем операции.
 

Аннотирующие сущности – это поясняющие части UML-моделей, иными словами, комментарии, которые можно применить для описания, выделения и пояснения любого элемента модели. Главная из аннотирующих сущностей – примечание. Это символ, служащий для описания ограничений и комментариев, относящихся к элементу либо набору элементов. Графически представлен прямоугольником с загнутым углом; внутри помещается текстовый или графический комментарий.
 

Класс – это описание набора объектов с одинаковыми атрибутами, операциями, связями и семантикой.


Графически класс изображается в виде прямоугольника, разделенного на 3 блока горизонтальными линиями:
имя класса
атрибуты (свойства) класса
операции (методы) класса.
 
Для атрибутов и операций может быть указан один из трех типов видимости:
— — private (частный)
# — protected (защищенный)
+ — public (общий)
Видимость для полей и методов указывается в виде левого символа в строке с именем соответствующего элемента.

Абстрактные методы класса обозначаются курсивным шрифтом.
Статические методы класса обозначаются подчеркиванием.
