Билет 25.
-----ЗАДАНИЕ 1------
Интерфейсы.
Общий синтаксиси и расширения.
Пустые интерфейсы.
Реализация и применение.
Сравнение с абстрактными классами.
--------------------
Интерфейсы определяют некоторый функционал, не имеющий конкретной реализации, который затем реализуют классы,
применяющие эти интерфейсы. И один класс может применить множество интерфейсов.

Общий синтаксис:
interface Printable{
	void print();
}
class Book implements Printable{

    String name;
    String author;

    Book(String name, String author){

        this.name = name;
        this.author = author;
    }

    public void print() {

        System.out.printf("%s (%s) \n", name, author);
    }
}
Пустые интерфейсы (интерфейсы без методов) используются для маркировки класса - Marker interface pattern. Чтобы использовать эту модель, класс реализует интерфейс, а взаимодействующие с классом методы проверяют наличие интерфейса. В отличие от обычного интерфейса, который определяет функциональность, важен сам факт обладания класса маркером. Маркер лишь является признаком наличия определённого поведения у объектов класса, помеченного маркером. Пример: интерфейс Serializable.
Отличия интерфейса от абстрактного класса:
1) Интерфейс используется для декларирования поведения объекта, у интерфейса нет состояния. У абстрактного класса есть поля - есть состояние.
2) Абстрактный класс связывает/объединяет родственные классы, имеющие близкую связь (например собака и кот). В то же время один и тот же интерфейс могут реализовывать абсолютно не связанные друг с другом классы.
3) Классы могут реализовывать сколько угодно интерфейсов, но наследоваться могут только от одного класса.

-----ЗАДАНИЕ 2------
Регулярыне выражение и оранизация работы с ними в Java.
Примеры.
--------------------
Класс Pattern - конструктора регулярных выражений. С помощью его метода compile создается объект класса Pattern:
Pattern pattern = Pattern.compile("java", Pattern.CASE_INSENSITIVE);//поиск совпадений с шаблоном будет производиться без учета регистра символов
или
Pattern pattern = Pattern.compile("java")
Некоторые положения синтаксиса регулярных выражений:
1) ^ - начало строки
2) $ - конец строки
3) \d - цифра
4) \D - не цифра
5) \s - пробел
6) \w - буква, цифра или _
7) . - любой символ
8) [абв] - любой из перечисленных (а,б, или в)
9) [a-zA-Z] - слияние диапазонов (латинские символы от a до z без учета регистра )
10) [a-z&&[def]] - пересечение символов (символы d,e,f)
Класс Matcher:
Matcher - класс, из которого создается объект для поиска совпадений по шаблону. Ему надо дать шаблон поиска и «адрес», по которому искать. Для создания объекта Matcher предусмотрен следующий метод в классе Pattern:
рublic Matcher matcher(CharSequence input)
пример:
Pattern p = Pattern.compile("a*b");// скомпилировали регулярное выражение в представление
Matcher m = p.matcher("aaaaab");//создали поисковик в тексте “aaaaab” по шаблону "a*b"

Основные методы: boolean find() - ищет очередное совпадение в тексте с шаблоном. Методы replaceFirst() и replaceAll() создают новый объект String – строку, представляющую собой исходный текст, в котором совпадения с шаблоном заменены на текст, переданный методу в качестве аргумента. Причём метод replaceFirst заменяет только первое совпадение, а replaceAll – все совпадения в тесте. Исходный текст остается без изменений.
Пример:
public static void main(String[] args) {
    String text = "Егор Алла Анна";
    Pattern pattern = Pattern.compile("А.+?а");

    Matcher matcher = pattern.matcher(text);
    while (matcher.find()) {
        int start=matcher.start();
        int end=matcher.end();
        System.out.println("Найдено совпадение " + text.substring(start,end) + " с "+ start + " по " + (end-1) + " позицию");
    }
    System.out.println(matcher.replaceFirst("Ира"));
    System.out.println(matcher.replaceAll("Ольга"));
    System.out.println(text);
}
Вывод:
Найдено совпадение Алла с 5 по 8 позицию
Найдено совпадение Анна с 10 по 13 позицию
Егор Ира Анна
Егор Ольга Ольга
Егор Алла Анна

