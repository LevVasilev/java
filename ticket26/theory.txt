Билет №26
-----ЗАДАНИЕ 1------
Абстрактные методы и классы.
Вложенные и анонимные классы.
--------------------

Абстрактные методы и классы. Вложенные и анонимные классы.
Абстрактный класс похож на обычный класс. В абстрактном классе также можно определить поля и методы, но в то же время нельзя создать объект
или экземпляр абстрактного класса. Абстрактные классы призваны предоставлять базовый функционал для классов-наследников. А производные классы уже реализуют этот функционал.
Абстрактные методы – это методы у которых отсутствует реализация.
Кроме обычных методов абстрактный класс может содержать абстрактные методы. Такие методы определяются с помощью ключевого слова abstract и не имеют никакой реализации.
Производный класс обязан переопределить и реализовать все абстрактные методы, которые имеются в базовом абстрактном классе. Также следует учитывать,
что если класс имеет хотя бы один абстрактный метод, то данный класс должен быть определен как абстрактный.

Вложенные классы можно прописывать внутри других классов. Такое зачастую используется, когда вложенный класс дополняет основной класс и является его частью.
Создав вложенный класс вы можете прописать в нём дополнительные поля, методы и конструкторы и далее ссылаясь на главный класс вы можете дополнительно ссылаться на класс наследник.
Пример:
class Auto {
 String model;

	class Engine {
		private boolean working = false;

		public void work () {
			working = true;
			System.out.print("Двигатель запущен!");
		}
	}

	Engine en = new Engine();
}

public class Main {

	public static void main(String[] args) {
		Auto bmw = new Auto();
		bmw.en.work();
	}
}

Или пример с System:
// System - основной класс
// out - объект на основе вложенного класса
// print - метод, что находиться внутри вложенного класса
System.out.print("");

Анонимные классы - это классы, что не имеют имени и их создание происходит в момент инициализации объекта. Ра
Пример создания анонимного класса:

Auto car = new Auto() {
	void flyingMoto () {
		System.out.print ("Летающий мотоцикл");
	}
};

-----ЗАДАНИЕ 2------
Работа с Датой и временем в Java.
Примеры использования.
--------------------

Работа с датой и временем в Джава. Примеры использования.
Основные 2 класса -  java.util.Date и Calendar
Единственной реализацией класса Calendar является класс GregorianCalendar

Пример:
public static void main(String[] args) {

   Calendar calendar = new GregorianCalendar(2017, 0 , 25);
   Date date = calendar.getTime();
   System.out.println(date);
}
Вывод:
Wed Jan 25 00:00:00 MSK 2017

Класс Date
Для сравнения дат служат методы after(Date date), before(Date date), которые возвращают булевское значение, compareTo(Date anotherDate) возвращает значение типа
int которое равно -1 если дата меньше сравниваемой, 1 если больше и 0 если даты равны

в классе Calendar можно использовать константы ( Например calendar.set(Calendar.DAY_OF_MONTH, 25); ). Также есть метод getInstance(), который устанавливает такущую дату:
Calendar cal = Calendar.getInstance();

Также есть класс для установления удобного формата - SimpleDateFormat. Пример:
SimpleDateFormat sdf = new SimpleDateFormat("yyyy MMMM dd HH:mm:ss");

