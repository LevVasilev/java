Билет 27.
-----ЗАДАНИЕ 1------
Перечисления.
Синтаксис и применение.
Перечисления в switch.
Перечисления в аннотациях.
--------------------

Исключительная ситуация – это событие, которое привело к сбою в работе программы.
        Object
           |
     Throwable(CHECKED)
      /            \
Error(UNCHECKED)  Exception(CHECKED)
                      |
                   RuntimeException(UNCHECKED)

Throwable и Exception и все их наследники (за исключением наследников Error-а и RuntimeException-а) — checked
— Error и RuntimeException и все их наследники — unchecked
Необходимо понимать, что
— проверка на checked исключения происходит в момент компиляции (compile-time checking)
— перехват исключений (catch) происходит в момент выполнения (runtime checking)

Механизм обработки: В Java исключения обрабатываются с помощью конструкции try-catch-finally, где finally – опциональная ветка, при наличии выполняется как после try, так и любой из веток catch. Кроме того, часто исключения не перехватываются в том методе, где возникают, а пробрасываются выше по стеку вызовов.
Классификация исключений: Все исключения делятся на 2 вида — проверяемые (checked) и непроверяемые (unchecked). 
Все проверяемые исключения (checked) происходят от класса Exception.
Второй вид исключений — “непроверяемые”. Они происходят от классов RuntimeException, Error. Этих ошибок компилятор не ожидает.  
Генерация исключений: Генерация (порождение) исключения происходит по ключевому слову throw, которое употребляется либо с параметром, либо без него:
throw [ <выражение> ];
Тип выражения, стоящего после throw, определяет тип порождаемого исключения. При генерации исключения выполнение текущего блока прекращается, и происходит поиск соответствующего обработчика и передача ему управления. Как правило, исключение генерируется не в try-блоке, а в функциях, прямо или косвенно в него вложенных.
-----ЗАДАНИЕ 2------
Работа с файлами в Java.
Примеры использования.
--------------------

Тип enum — это специальный тип данных, который позволяет переменной быть набором предопределенных констант. Другими словами, он позволяет создать переменную, которая может принимать несколько значений (каждое из значений, объявленных в самом перечислении, и ничего более).
Все константы, определенные в перечислении, являются public static final. Поскольку они статичны, доступ к ним можно получить через EnumName.instanceName;
Пример использования:
public enum Size {
	SMALL,
	MEDIUM,
	LARGE
}

Size size = Size.SMALL;
