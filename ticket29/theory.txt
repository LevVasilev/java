Билет №29
-----ЗАДАНИЕ 1------
Блок try/catch/finally, её предназначение и особенности.
--------------------

Блок try/catch/finally предназначен для обработки исключительных ситуаций.
Блок кода, который мы хотим проверить необходимо обернуть в блок try. Далее, если выбросится то или иное исключение, оно будет передано в блок catch в зависимости от того, какое исключения было выброшено. Если в try поймалось исключение, код находящийся ниже исключения выполнен не будет никогда. Есть также блок finally, который выполняется вне зависимости от try и catch и стоит после них.
try {
	url = new URL(siteUrl);
} catch (MalformedURLException e) {
	throw new RuntimeException(e);
} 
Блок finally обычно используется для того, чтобы закрыть открытые в блоке try потоки или освободить ресурсы. Однако при написании программы не всегда возможно уследить за закрытием всех ресурсов. Для облегчения нашей жизни разработчики Java предложили нам конструкцию try-with-resources, которая автоматически закрывает ресурсы, открытые в блоке try.

-----ЗАДАНИЕ 2------
Использование языка UML для проектирования и документации объектно-ориентированных программ.
Основные UML диаграммы для оборажения отношений между классами в ООП программах.
--------------------
Диаграмма классов предназначена для представления внутренней структуры программы в виде классов и связей между ними. 
Существует два основных типа диаграмм UML: структурные диаграммы и поведенческие диаграммы.
Структурные диаграммы  представляют статическую структуру программного обеспечения или системы, они также показывают различные уровни абстракции и реализации. Они показывают иерархию компонентов или модулей и то, как они связаны и взаимодействуют между собой.
Поведенческие программы. Основное внимание здесь уделяется динамическим аспектам системы программного обеспечения или процесса. Эти диаграммы показывают функциональные возможности системы и демонстрируют, что должно происходить в моделируемой системе.  
Диаграммы классов оперируют тремя видами сущностей UML:
Структурные.
Поведенческие.
Аннотирующие.

Структурные сущности – это «имена существительные» в модели UML. В основном, статические части модели, представляющие либо концептуальные, либо физические элементы. Основным видом структурной сущности в диаграммах классов является класс.
 
Поведенческие сущности – динамические части моделей UML. Это «глаголы» моделей, представляющие поведение модели во времени и пространстве. Основной из них является взаимодействие – поведение, которое заключается в обмене сообщениями между наборами объектов или ролей в определенном контексте для достижения некоторой цели. Сообщение изображается в виде линии со стрелкой, почти всегда сопровождаемой именем операции.
 
Аннотирующие сущности – это поясняющие части UML-моделей, иными словами, комментарии, которые можно применить для описания, выделения и пояснения любого элемента модели. Главная из аннотирующих сущностей – примечание. Это символ, служащий для описания ограничений и комментариев, относящихся к элементу либо набору элементов. Графически представлен прямоугольником с загнутым углом; внутри помещается текстовый или графический комментарий.
 
Графически класс изображается в виде прямоугольника, разделенного на 3 блока горизонтальными линиями:
имя класса
атрибуты (свойства) класса
операции (методы) класса.
 
Для атрибутов и операций может быть указан один из трех типов видимости:
— — private (частный)
# — protected (защищенный)
+ — public (общий)
Видимость для полей и методов указывается в виде левого символа в строке с именем соответствующего элемента.

Для абстрактного класса имя класса записывается курсивом.
Абстрактные методы класса обозначаются курсивным шрифтом.
Статические методы класса обозначаются подчеркиванием.

Отношения:
Отношение ассоциации (стрелка) используют, чтобы показать, что между классами существует некоторая связь. Обычно с помощью него на диаграмме классов показывают, что один класс пользуется функционалом другого класса.
Отношение зависимости (пунктирная стрелка) используют, чтобы показать, что изменение одного класса требует изменение другого класса.
Отношение наследования (стрелка с незакрашенным концом) используется, чтобы показать, что один класс является родителем (базовым классом или суперклассом) для другого класса (потомка, производного класса).
Отношение агрегации (стрелка с незакрашенным ромбиком на конце) между двумя классами показывает, что один из них включает в себя другой класс в качестве составной части. При этом класс-часть может и существовать обособленно от класса-целого (далее мы раскроем смысл этой фразы).
Отношение композиции (стрелка с закрашенным ромбиком на конце) является частным случаем отношения агрегации. Однако у него есть одно отличие – классы-части, которые он соединяет с классом-целым, не могут существовать обособленно.

